<?php

/**
 * @file
 * Implements DPS PX Post payment service for use in Drupal Commerce.
 */

define('COMMERCE_DPS_PXPOST_USERNAME', 'PXPOSTUSERNAME');
define('COMMERCE_DPS_PXPOST_PASSWORD', '');
define('COMMERCE_DPS_PXPOST_SERVER', 'https://sec.paymentexpress.com/pxpost.aspx');
define('COMMERCE_DPS_PXPOST_CURRENCY', 'NZD');
define('COMMERCE_DPS_PXPOST_REFERENCE_PREFIX', 'Website Order');

/**
 * Implements hook_menu().
 *
 * @TODO checkout/%commerce_order/dps_pxpost_fprn may not be required.
 */
function commerce_dps_pxpost_menu() {
  // Define an always-accessible path to receive FPRN (Fail-proof
  // Result Notification).
  $items['checkout/%commerce_order/dps_pxpost_fprn'] = array(
    'page callback' => 'commerce_dps_pxpost_process_fprn',
    'page arguments' => array(1),
    'access callback' => TRUE,
    'type' => MENU_CALLBACK,
  );

  return $items;
}

/**
 * Implements hook_commerce_payment_method_info().
 *
 * @see https://drupalcommerce.org/developer-guide/core-architecture/info-hooks/payment-info-hooks#payment-method
 */
function commerce_dps_pxpost_commerce_payment_method_info() {
  $payment_methods = array();

  $payment_methods['dps_pxpost'] = array(
    // Base name for callback methods.
    'base' => 'commerce_dps_pxpost',
    // Translatable full title of the payment method, used in
    // administrative interfaces.
    'title' => t('DPS Payment Express PX Post'),
    // Abbreviated title that may simply include the payment
    // provider’s name as it makes sense to the customer (i.e. you
    // would display PayPal, not PayPal WPS to a customer); defaults
    // to the title.
    'short_title' => t('Credit card (PX Post)'),
    // Title to display on forms where the payment method is selected
    // and may include HTML for methods that require images and
    // special descriptions; defaults to the title.
    'display_title' => t('Credit card'),
    // Translatable description of the payment method, including the
    // nature of the payment and the payment gateway that actually
    // captures the payment.
    'description' => t('Integrates DPS Payment Express PX Post method for credit card transactions.'),
    // Whether the default payment method rule configuration for this
    // payment method should be enabled by default.
    'active' => FALSE,
    // Whether payments can be processed via this payment method
    // through the administrative payment terminal on an order’s
    // Payment tab.
    'terminal' => FALSE,
    // Whether the customer must be redirected offsite to put in their
    // payment information; used specifically by the Off-site payment
    // redirect checkout pane.
    'offsite' => FALSE,
    // Whether the customer should be automatically redirected to an
    // offsite payment site on the payment step of checkout.
    'offsite_autoredirect' => FALSE,
    // Callbacks are automatically set using default method format,
    // see URL in function comment for details.
    //
    // Card on File callbacks.
    'cardonfile' => array(
      'charge callback' => 'commerce_dps_pxpost_cardonfile_charge',
      // AFAICT these don't apply since DPS doesn't offer a way to
      // update or delete a token stored at the gateway?
      // @see https://www.drupal.org/node/2116357
      'update callback' => 'commerce_dps_pxpost_cardonfile_update',
      'delete callback' => 'commerce_dps_pxpost_cardonfile_delete',
    ),
  );

  return $payment_methods;
}

/**
 * Returns the default settings for the Commerce DPS PX Post payment method.
 */
function commerce_dps_pxpost_default_settings() {
  return array(
    'username' => COMMERCE_DPS_PXPOST_USERNAME,
    'password' => COMMERCE_DPS_PXPOST_PASSWORD,
    'server' => COMMERCE_DPS_PXPOST_SERVER,
    'currency' => COMMERCE_DPS_PXPOST_CURRENCY,
    'reference_prefix' => COMMERCE_DPS_PXPOST_REFERENCE_PREFIX,
    'txn_type' => COMMERCE_CREDIT_AUTH_CAPTURE,
    'log_transactions' => 0,
    'cardonfile' => FALSE,
    'continuous' => FALSE,
    'card_types' => array(),
  );
}

/**
 * Payment method callback: settings form.
 */
function commerce_dps_pxpost_settings_form($settings = NULL) {
  module_load_include('inc', 'commerce_payment', 'includes/commerce_payment.credit_card');
  module_load_include('inc', 'commerce_dps_pxpost', 'commerce_dps');
  module_load_include('inc', 'commerce_dps_pxpost', 'commerce_dps_pxpost');

  $form = array();

  $settings = (array) $settings + commerce_dps_pxpost_default_settings();

  $form['username'] = array(
    '#type' => 'textfield',
    '#title' => t('PX Post Username'),
    '#description' => t('PX Post Username (contact Payment Express for this).'),
    '#default_value' => $settings['username'],
    '#required' => TRUE,
  );

  $form['password'] = array(
    '#type' => 'textfield',
    '#title' => t('PX Post Password'),
    '#description' => t('PX Post Password (contact Payment Express for this).'),
    '#default_value' => $settings['password'],
    '#required' => TRUE,
  );

  $form['txn_type'] = array(
    '#type' => 'radios',
    '#title' => t('Default credit card transaction type'),
    '#description' => t('The default will be used to process transactions during checkout.'),
    '#options' => array(
      COMMERCE_CREDIT_AUTH_CAPTURE => t('Authorization and capture'),
      COMMERCE_CREDIT_AUTH_ONLY => t('Authorization only (requires manual or automated capture after checkout)'),
    ),
    '#default_value' => $settings['txn_type'],
  );

  $form['card_types'] = array(
    '#type' => 'checkboxes',
    '#title' => t('Limit accepted credit cards to the following types'),
    '#description' => t('If you want to limit acceptable card types, you should only select those supported by your merchant account.') . '<br />' . t('If none are checked, any credit card type will be accepted.'),
    '#options' => commerce_payment_credit_card_types(),
    '#default_value' => $settings['card_types'],
  );

  $form['server'] = array(
    '#type' => 'value',
    '#title' => t('PX Post server'),
    '#value' => $settings['server'],
  );

  $form['currency'] = array(
    '#type' => 'select',
    '#title' => t('Currency code'),
    '#description' => t('Transactions can only be processed in one of the listed currencies.'),
    '#options' => commerce_dps_currencies(),
    '#default_value' => $settings['currency'],
  );

  // A hook is available to modify this in transit if you need
  // something more complicated; see
  // https://www.drupal.org/node/1848344
  $form['reference_prefix'] = array(
    '#type' => 'textfield',
    '#title' => t('Merchant Reference Prefix'),
    '#description' => t('Prefix to order number reference at DPS, eg "Website Order #1234."'),
    '#default_value' => $settings['reference_prefix'],
    '#required' => TRUE,
  );

  // Card on File support requires the Card on File module.
  if (module_exists('commerce_cardonfile')) {
    $form['cardonfile'] = array(
      '#type' => 'checkbox',
      '#title' => t('Enable Card on File functionality with this payment method.'),
      '#description' => t('This requires your DPS account to have AddBillCard support enabled.'),
      '#default_value' => $settings['cardonfile'],
    );
  }
  else {
    $form['cardonfile'] = array(
      '#type' => 'markup',
      '#markup' => t('To enable Card on File functionality download and install the Card on File module.'),
    );
  }

  $form['log_transactions'] = array(
    '#type' => 'select',
    '#title' => t('Record transaction information to Drupal logs.'),
    '#description' => t('Record communication with DPS server to Drupal logs. For development only.'),
    '#options' => array(
      0 => ('Disabled (production)'),
      1 => ('Enabled (development)'),
    ),
    '#default_value' => $settings['log_transactions'],
    '#required' => TRUE,
  );

  return $form;
}

/**
 * Payment method callback: checkout form.
 */
function commerce_dps_pxpost_submit_form($payment_method, $pane_values, $checkout_pane, $order) {
  module_load_include('inc', 'commerce_payment', 'includes/commerce_payment.credit_card');

  // Prepare the fields to include on the credit card form.
  $fields = array(
    'code' => '',
  );

  // Add the credit card types array if necessary.
  if (isset($payment_method['settings']['card_types'])) {
    $card_types = array_diff(array_values($payment_method['settings']['card_types']), array(0));

    if (!empty($card_types)) {
      $fields['type'] = $card_types;
    }
  }

  return commerce_payment_credit_card_form($fields);
}

/**
 * Payment method callback: checkout form validation.
 */
function commerce_dps_pxpost_submit_form_validate($payment_method, $pane_form, $pane_values, $order, $form_parents = array()) {
  // If the customer specified a card on file, skip the normal validation.
  if (module_exists('commerce_cardonfile') && !empty($payment_method['settings']['cardonfile']) &&
    !empty($pane_values['cardonfile']) && $pane_values['cardonfile'] !== 'new') {
    return;
  }

  module_load_include('inc', 'commerce_payment', 'includes/commerce_payment.credit_card');

  // Validate the credit card fields.
  $settings = array(
    'form_parents' => array_merge($form_parents, array('credit_card')),
  );

  if (!commerce_payment_credit_card_validate($pane_values['credit_card'], $settings)) {
    return FALSE;
  }
}

/**
 * Payment method callback: checkout form submission.
 *
 * @TODO There is a lot of code duplicated between this function and
 * commerce_dps_pxpost_submit_form_submit(). Maybe split out of these
 * two functions into a shared function?
 *
 * @param object $payment_method
 *  The payment method instance definition array.
 * @param object $pane_form
 *   Form API array.
 * @param object $pane_values
 *   Submitted form values.
 * @param object $order
 *   The order object that is being processed
 * @param array $charge
 *   The price array for the charge amount with keys of 'amount' and 'currency'
 *   If null the total value of the order is used.
 */
function commerce_dps_pxpost_submit_form_submit($payment_method, $pane_form, $pane_values, $order, $charge) {
  module_load_include('inc', 'commerce_dps_pxpost', 'commerce_dps');

  // Format order total for transaction.
  if (!isset($charge)) {
    $wrapper = entity_metadata_wrapper('commerce_order', $order);
    $charge = commerce_line_items_total($wrapper->commerce_line_items);
  }

  // @TODO: If the customer specified payment using a card on file,
  // attempt that now and simply return the result.
  if (module_exists('commerce_cardonfile') && $payment_method['settings']['cardonfile'] &&
    !empty($pane_values['cardonfile']) && $pane_values['cardonfile'] !== 'new') {
    return commerce_dps_pxpost_submit_form_submit_cardonfile($payment_method, $pane_form, $pane_values, $order, $charge);
  }

  // Determine the credit card type if possible for use in later code.
  if (!empty($pane_values['credit_card']['number'])) {
    module_load_include('inc', 'commerce_payment', 'includes/commerce_payment.credit_card');
    $card_type = commerce_payment_validate_credit_card_type($pane_values['credit_card']['number'], array_keys(commerce_payment_credit_card_types()));
  }

  // If the charge amount is 0...
  if ($charge['amount'] == 0) {
    // Prevent the transaction except under limited circumstances.
    $prevent_transaction = TRUE;

    // Allow 0 amount authorizations on Visa cards.
    if ($payment_method['settings']['txn_type'] == COMMERCE_CREDIT_AUTH_ONLY && $card_type == 'visa') {
      $prevent_transaction = FALSE;
    }

    // If the transaction should still be prevented...
    if ($prevent_transaction) {
      // Create a transaction to log the skipped transaction and display a
      // helpful message to the customer.
      $transaction = commerce_payment_transaction_new('dps_pxpost', $order->order_id);
      $transaction->amount = $charge['amount'];
      $transaction->currency_code = $charge['currency_code'];
      $transaction->status = COMMERCE_PAYMENT_STATUS_FAILURE;
      $transaction->message = t('Invalid @amount transaction not attempted.', array('@amount' => commerce_currency_format($charge['amount'], $charge['currency_code'])));
      commerce_payment_transaction_save($transaction);

      drupal_set_message('We encountered an error processing your transaction. Please contact us to resolve the issue.', 'error');
      return FALSE;
    }
  }

  $order_wrapper = entity_metadata_wrapper('commerce_order', $order);

  // Get the default transaction type from the payment method settings.
  $txn_type = $payment_method['settings']['txn_type'];

  // If txn_type has been specified in the pane values array, such as through
  // the special select element we alter onto the payment terminal form, use
  // that instead.
  if (!empty($pane_values['txn_type'])) {
    $txn_type = $pane_values['txn_type'];
  }

  // By default we don't set EnableAddBillCard with DPS.
  $addbillcard = FALSE;
  // Unless Card on File is enabled and the form says to store it.
  if (module_exists('commerce_cardonfile') && !empty($payment_method['settings']['cardonfile']) &&
    !empty($pane_values['credit_card']['cardonfile_store']) && $pane_values['credit_card']['cardonfile_store']) {
    $addbillcard = TRUE;
  }

  // Prepare a card holder name for use in the request. According to
  // DPS docs, the cardHolderName value is not validated.
  if ($order_wrapper->commerce_customer_billing->value()){
    $billing_address = $order_wrapper->commerce_customer_billing->commerce_customer_address->value();
    if (!empty($billing_address['name_line'])) {
      $cardholder_name = $billing_address['name_line'];
    }
  }

  // Prepare a description for the order (truncated if over 255 char).
  $description = array();
  // Descriptions come from products, though not all environments have
  // them. So check first.
  if (function_exists('commerce_product_line_item_types')) {
    foreach ($order_wrapper->commerce_line_items as $delta => $line_item_wrapper) {
      if (in_array($line_item_wrapper->type->value(), commerce_product_line_item_types())) {
        $description[] = round($line_item_wrapper->quantity->value(), 2) . 'x ' . $line_item_wrapper->line_item_label->value();
      }
    }
  }
  $description = substr(implode(', ', $description), 0, 255);

  if ($payment_method['settings']['log_transactions']) {
    watchdog('commerce_dps_pxpost', 'Debug: <pre>!debug</pre>', array(
        '!debug' => print_r(array(
                  'payment_method' => $payment_method,
                  'pane_values' => $pane_values,
                  'order' => $order,
                  'charge' => $charge,
                ),1)), WATCHDOG_DEBUG);
  }

  $txn = new SimpleXMLElement('<Txn></Txn>');
  $txn->addChild('PostUsername', $payment_method['settings']['username']);
  $txn->addChild('PostPassword', $payment_method['settings']['password']);
  $txn->addChild('Amount', commerce_currency_amount_to_decimal($charge['amount'], $charge['currency_code']));
  $txn->addChild('TxnType', commerce_dps_txn_type($txn_type));
  switch ($txn_type) {
    case COMMERCE_CREDIT_AUTH_CAPTURE:
    case COMMERCE_CREDIT_AUTH_ONLY:
      $txn->addChild('InputCurrency', $charge['currency_code']);
      if (!empty($cardholder_name)) {
        $txn->addChild('CardHolderName', $cardholder_name);
      }
      $txn->addChild('CardNumber', $pane_values['credit_card']['number']);
      $txn->addChild('DateExpiry', $pane_values['credit_card']['exp_month'] . substr($pane_values['credit_card']['exp_year'], 2, 4));
      if (isset($pane_values['credit_card']['code'])) {
        $txn->addChild('Cvc2', $pane_values['credit_card']['code']);
      }
      if (isset($order->merchant_reference)) {
        $txn->addChild('MerchantReference', $order->merchant_reference);
      }
      else {
        $txn->addChild('MerchantReference', t('@prefix @order_number', array('@prefix' => $payment_method['settings']['reference_prefix'], '@order_number' => $order->order_number)));
      }
      if (!empty($order->mail)) {
        $txn->addChild('TxnData1', $order->mail);
      }
      if (!empty($description)) {
        $txn->addChild('TxnData2', $description);
      }
      if ($addbillcard) {
        $txn->addChild('EnableAddBillCard', 1);
      }
      break;

    case COMMERCE_CREDIT_CREDIT:
      $txn->addChild('DpsTxnRef', '@TODO Transaction ID for refund.');
      break;

//    case COMMERCE_CREDIT_PRIOR_AUTH_CAPTURE:
//      $txn->addChild('DpsTxnRef', '@TODO Transaction ID for complete.');

    default:
      drupal_set_message('Invalid transaction type.', 'error');

  }
  $xml = $txn->asXML();

  if ($payment_method['settings']['log_transactions']) {
    watchdog('commerce_dps_pxpost', 'PX Post XML submission: <pre>@xml</pre>', array('@xml' => $xml), WATCHDOG_DEBUG);
  }

  $options = array(
    'method' => 'POST',
    'data' => $xml,
    'headers' => array(
      'Content-type' =>  'application/xml',
      'User-Agent' => 'Drupal Commerce DPS PX Post (+https://drupal.org/project/commerce_dps)'
    ),
  );
  $result = drupal_http_request($payment_method['settings']['server'], $options);

  if ($payment_method['settings']['log_transactions']) {
    watchdog('commerce_dps_pxpost', 'PX Post result (@code) from @server: <pre>@data</pre>', array('@code' => trim($result->code . ' ' . $result->status_message), '@data' => $result->data, '@server' => $payment_method['settings']['server']), WATCHDOG_DEBUG);
  }

  // Prepare a transaction object to log the API response.
  $transaction = commerce_payment_transaction_new('dps_pxpost', $order->order_id);
  $transaction->instance_id = $payment_method['instance_id'];
  $transaction->amount = $charge['amount'];
  $transaction->currency_code = $charge['currency_code'];
  $transaction->payload[REQUEST_TIME] = $result->data;

  if ($result->code == 200) {
    if ($xml = simplexml_load_string($result->data)) {
      $success = "{$xml->Success}";
      $transaction->remote_id = (string)$xml->DpsTxnRef;

      // If we didn't get an approval response code...
      if ($success != '1') {
        // Create a failed transaction with the error message.
        $transaction->status = COMMERCE_PAYMENT_STATUS_FAILURE;
      }
      else {
        // Set the transaction status based on the type of transaction this was.
        switch ($txn_type) {
          case COMMERCE_CREDIT_AUTH_ONLY:
            $transaction->status = COMMERCE_PAYMENT_STATUS_PENDING;
            break;

          case COMMERCE_CREDIT_AUTH_CAPTURE:
            $transaction->status = COMMERCE_PAYMENT_STATUS_SUCCESS;
            break;

          case COMMERCE_CREDIT_CAPTURE_ONLY:
            $transaction->status = COMMERCE_PAYMENT_STATUS_SUCCESS;
            break;

          default:
            watchdog('commerce_dps_pxpost', 'Status: @status', array('@status' => $txn_type));
        }
      }
      // Store the type of transaction in the remote status.
      $transaction->remote_status = "{$xml->Transaction->TxnType}";
    }
  }

  // Build a meaningful response message.
  $message = array(
    'Txn Type: @txn_type',
    'Status: @status',
    'Detail: @detail',
  );
  // Add the CVV response if enabled.
  if (isset($txn->Cvc2)) {
    $message[] = 'CVV match: @cvv_result';
  }

  $transaction->message = implode('<br />', $message);
  $transaction->message_variables = array(
    '@txn_type' => commerce_dps_reverse_txn_type((string)$xml->Transaction->TxnType),
    '@status' => ($success != '1' ? t('REJECTED') : t('ACCEPTED')),
    '@detail' => check_plain((string)$xml->Transaction->MerchantHelpText),
    '@cvv_result' => (string)$xml->Transaction->Cvc2ResultCode,
  );

  // Save the transaction information.
  commerce_payment_transaction_save($transaction);
  commerce_order_save($order);

  // If the payment failed, display an error and rebuild the form.
  if ($success != '1') {
    drupal_set_message(t('Transaction error: %error', array('%error' => (string)$xml->Transaction->CardHolderResponseDescription)), 'error');
    return FALSE;
  }

  // For certain transaction types, if we got back a Billing ID we
  // need to store that against the user.
  switch ($txn_type) {
    case COMMERCE_CREDIT_AUTH_ONLY:
    case COMMERCE_CREDIT_AUTH_CAPTURE:
    case COMMERCE_CREDIT_CAPTURE_ONLY:
      if (isset($xml->Transaction->DpsBillingId)) {
        $billing_id = (string)$xml->Transaction->DpsBillingId;

        // Build a payment details array for the credit card.
        $payment_details = array(
          'cardNumber' => $pane_values['credit_card']['number'],
          'expirationDate' => $pane_values['credit_card']['exp_year'] . '-' . $pane_values['credit_card']['exp_month'],
        );
        if (isset($pane_values['credit_card']['code'])) {
          $payment_details['cardCode'] = $pane_values['credit_card']['code'];
        }

        // First look to see if we already have cards on file for the user.
        $stored_cards = commerce_cardonfile_load_multiple_by_uid($order->uid, $payment_method['instance_id']);
        $add_to_profile = NULL;

        if (!empty($stored_cards)) {
          // @TODO: Iterate through stored cards, remove any with
          // matching details but differing BillingId.
        }
        // Store the card details.
        $card_data = commerce_cardonfile_new();
        $card_data->uid = $order->uid;
        $card_data->payment_method = $payment_method['method_id'];
        $card_data->instance_id = $payment_method['instance_id'];
        $card_data->remote_id = $billing_id;
        $card_data->card_type = !empty($card_type) ? $card_type : 'card';
        $card_data->card_name = !empty($billing_address['name_line']) ? $billing_address['name_line'] : '';
        $card_data->card_number = substr($pane_values['credit_card']['number'], -4);
        $card_data->card_exp_month = $pane_values['credit_card']['exp_month'];
        $card_data->card_exp_year = $pane_values['credit_card']['exp_year'];
        $card_data->instance_default = $pane_values['cardonfile_instance_default'];
        $card_data->status = 1;

        // Save and log the creation of the new card on file.
        commerce_cardonfile_save($card_data);
      }
  }

  return TRUE;
}

/**
 * Imitates the checkout form submission callback for the PX Post payment method.
 */
function commerce_dps_pxpost_submit_form_submit_cardonfile($payment_method, $pane_form, $pane_values, $order, $charge) {
  // First attempt to load the card on file.
  $card_data = commerce_cardonfile_load($pane_values['cardonfile']);

  // Fail now if it is no longer available or the card is inactive.
  if (empty($card_data) || $card_data->status == 0) {
    drupal_set_message(t('The requested card on file is no longer valid.'), 'error');
    return FALSE;
  }
  return commerce_dps_pxpost_cardonfile_charge($payment_method, $card_data, $order, $charge);
}

/**
 * Card on file callback: background charge payment
 *
 * @param object $payment_method
 *  The payment method instance definition array.
 * @param object $card_data
 *   The stored credit card data array to be processed
 * @param object $order
 *   The order object that is being processed
 * @param array $charge
 *   The price array for the charge amount with keys of 'amount' and 'currency'
 *   If null the total value of the order is used.
 *
 * @TODO There is a lot of code duplicated between this function and
 * commerce_dps_pxpost_submit_form_submit(). Maybe split out of these
 * two functions into a shared function?
 *
 * @return
 *   TRUE if the transaction was successful
 */
function commerce_dps_pxpost_cardonfile_charge($payment_method, $card_data, $order, $charge = NULL) {
  module_load_include('inc', 'commerce_dps_pxpay', 'commerce_dps');
  module_load_include('inc', 'commerce_payment', 'includes/commerce_payment.credit_card');
  // Format order total for transaction.

  $order_wrapper = entity_metadata_wrapper('commerce_order', $order);
  if (!isset($charge)) {
    $charge = commerce_line_items_total($order_wrapper->commerce_line_items);
  }

  $txn_type = COMMERCE_CREDIT_REFERENCE_TXN;

  // Prepare a description for the order (truncated if over 255 char).
  $description = array();
  // Descriptions come from products, though not all environments have
  // them. So check first.
  if (function_exists('commerce_product_line_item_types')) {
    foreach ($order_wrapper->commerce_line_items as $delta => $line_item_wrapper) {
      if (in_array($line_item_wrapper->type->value(), commerce_product_line_item_types())) {
        $description[] = round($line_item_wrapper->quantity->value(), 2) . 'x ' . $line_item_wrapper->line_item_label->value();
      }
    }
  }
  $description = substr(implode(', ', $description), 0, 255);

  $txn = new SimpleXMLElement('<Txn></Txn>');
  $txn->addChild('PostUsername', $payment_method['settings']['username']);
  $txn->addChild('PostPassword', $payment_method['settings']['password']);
  $txn->addChild('Amount', commerce_currency_amount_to_decimal($charge['amount'], $charge['currency_code']));
  $txn->addChild('TxnType', commerce_dps_txn_type($txn_type));
  $txn->addChild('InputCurrency', $charge['currency_code']);
  $txn->addChild('DpsBillingId', $card_data->remote_id);
  if (isset($order->merchant_reference)) {
    $txn->addChild('MerchantReference', $order->merchant_reference);
  }
  else {
    $txn->addChild('MerchantReference', t('@prefix @order_number', array('@prefix' => $payment_method['settings']['reference_prefix'], '@order_number' => $order->order_number)));
  }
  if (!empty($order->mail)) {
    $txn->addChild('TxnData1', $order->mail);
  }
  if (!empty($description)) {
    $txn->addChild('TxnData2', $description);
  }
  $xml = $txn->asXML();

  if ($payment_method['settings']['log_transactions']) {
    watchdog('commerce_dps_pxpost', 'XML sent to DPS: <pre>@xml</pre>', array('@xml' => $xml), WATCHDOG_DEBUG);
  }

  $options = array(
    'method' => 'POST',
    'data' => $xml,
    'headers' => array(
      'Content-type' =>  'application/xml',
      'User-Agent' => 'Drupal Commerce DPS PX Post (+https://drupal.org/project/commerce_dps)'
    ),
  );
  $result = drupal_http_request($payment_method['settings']['server'], $options);

  if ($payment_method['settings']['log_transactions']) {
    watchdog('commerce_dps_pxpost', 'PX Post result (@code) from @server: <pre>@data</pre>', array('@code' => trim($result->code . ' ' . $result->status_message), '@data' => $result->data, '@server' => $payment_method['settings']['server']), WATCHDOG_DEBUG);
  }

  // Prepare a transaction object to log the API response.
  $transaction = commerce_payment_transaction_new('dps_pxpost', $order->order_id);
  $transaction->instance_id = $payment_method['instance_id'];
  $transaction->amount = $charge['amount'];
  $transaction->currency_code = $charge['currency_code'];
  $transaction->payload[REQUEST_TIME] = $result->data;

  if ($result->code == 200) {
    if ($xml = simplexml_load_string($result->data)) {
      $success = "{$xml->Success}";
      $transaction->remote_id = (string)$xml->DpsTxnRef;

      // If we didn't get an approval response code...
      if ($success != '1') {
        // Create a failed transaction with the error message.
        $transaction->status = COMMERCE_PAYMENT_STATUS_FAILURE;
      }
      else {
        $transaction->status = COMMERCE_PAYMENT_STATUS_SUCCESS;
      }
      // Store the type of transaction in the remote status.
      $transaction->remote_status = "{$xml->Transaction->TxnType}";
    }
  }

  // Build a meaningful response message.
  $message = array(
    'Txn Type: @txn_type',
    'Status: @status',
    'Detail: @detail',
  );
  // Add the CVV response if enabled.
  if (isset($txn->Cvc2)) {
    $message[] = 'CVV match: @cvv_result';
  }

  $transaction->message = implode('<br />', $message);
  $transaction->message_variables = array(
    '@txn_type' => commerce_dps_reverse_txn_type((string)$xml->Transaction->TxnType),
    '@status' => ($success != '1' ? t('REJECTED') : t('ACCEPTED')),
    '@detail' => check_plain((string)$xml->Transaction->MerchantHelpText),
    '@cvv_result' => (string)$xml->Transaction->Cvc2ResultCode,
  );

  // Save the transaction information.
  $transaction->data['debug'] = __FILE__ . '@' . (__LINE__+1);
  commerce_payment_transaction_save($transaction);
  commerce_order_save($order);

  // If the payment failed, display an error and rebuild the form.
  if ($success != '1') {
    drupal_set_message(t('We received the following error processing your card. Please enter your information again or try a different card.'), 'error');
    drupal_set_message(check_plain((string)$xml->CardHolderResponseDescription), 'error');
    return FALSE;
  }

  return TRUE;
}

/**
 * Update card on file callback.
 */
function commerce_dps_pxpost_cardonfile_update($payment_method, $card_data, $order, $charge = NULL) {
  return TRUE;
}

/**
 * Delete card on file callback.
 */
function commerce_dps_pxpost_cardonfile_delete($payment_method, $card_data, $order, $charge = NULL) {
  return TRUE;
}
